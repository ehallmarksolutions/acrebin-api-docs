openapi: '3.0.3'
info:
  title: AcreBin
  description: API for AcreBin DB
  version: '0.1'
servers:
  - url: https://acrebin.api.evanhallmark.com/api/v1
paths:
  /listings:
    get:
      summary: Retrieve listings
      description: Query listings in the database
      parameters:
        - name: latitude
          required: false
          in: query
          schema:
            type: number
            description: 'Sort listings by distance (longitude query parameter must also be present).'
            example: 42.9848
        - name: longitude
          required: false
          in: query
          schema:
            type: number
            description: 'Sort listings by distance (latitude query parameter must also be present).'
            example: -121.453
        - name: sortByPrice
          required: false
          in: query
          schema:
            type: string
            description: 'Sort listings by price'
            enum:
              - asc
              - desc
        - name: sortByAcres
          required: false
          in: query
          schema:
            type: string
            description: 'Sort listings by acreage'
            enum:
              - asc
              - desc
        - name: state
          required: false
          in: query
          schema:
            type: string
            description: 'Filter listings by state.'
            example: 'OR'
        - name: county
          required: false
          in: query
          schema:
            type: string
            description: 'Filter listings by county.'
            example: 'Klamath'
        - name: minAcres
          required: false
          in: query
          schema:
            type: number
            description: 'Filter listings by minimum acreage.'
            example: 1.5
        - name: maxAcres
          required: false
          in: query
          schema:
            type: number
            description: 'Filter listings by maximum acreage.'
            example: 200.0
        - name: minPrice
          required: false
          in: query
          schema:
            type: number
            description: 'Filter listings by minimum price.'
            example: 100000.0
        - name: maxPrice
          required: false
          in: query
          schema:
            type: number
            description: 'Filter listings by maximum price.'
            example: 2000000.0
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            description: 'Max number of listings to return.'
            example: 10
            default: 10
        - name: offset
          required: false
          in: query
          schema:
            type: integer
            default: 0
            description: 'Return listings after the offset (for supporting pagination)'
            example: 0
      responses:
        '200':
          $ref: '#/components/responses/ValidItems'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /listing/{id}:
    get:
      summary: Get listing by id
      description: Retrieve a listing item by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            description: 'Item id'
      responses:
        '200':
          $ref: '#/components/responses/ValidItem'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update an existing listing
      description: Updates an existing listing by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            description: 'Item id'
      requestBody:
        content: {}
      responses:
        '200':
          $ref: '#/components/responses/ValidItem'
        '400':
          $ref: '#/components/responses/Invalid'
        '422':
          $ref: '#/components/responses/UnableToProcess'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /listing:
    post:
      summary: Add listing
      description: Add a new listing to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          $ref: '#/components/responses/ValidItem'
        '400':
          $ref: '#/components/responses/Invalid'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '422':
          $ref: '#/components/responses/UnableToProcess'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /reps:
    get:
      summary: Retrieve reps
      description: Query reps in the database
      parameters:
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            description: 'Max number of reps to return.'
            example: 10
            default: 10
        - name: offset
          required: false
          in: query
          schema:
            type: integer
            default: 0
            description: 'Return reps after the offset (for supporting pagination)'
            example: 0
      responses:
        '200':
          $ref: '#/components/responses/ValidReps'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /rep/{id}:
    get:
      summary: Get rep by id
      description: Retrieve a rep by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            description: 'Rep id'
      responses:
        '200':
          $ref: '#/components/responses/ValidRep'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update an existing rep
      description: Updates an existing rep by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            description: 'Rep id'
      requestBody:
        content: {}
      responses:
        '200':
          $ref: '#/components/responses/ValidRep'
        '400':
          $ref: '#/components/responses/Invalid'
        '422':
          $ref: '#/components/responses/UnableToProcess'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /rep:
    post:
      summary: Add Rep
      description: Add a new rep to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rep'
      responses:
        '200':
          $ref: '#/components/responses/ValidRep'
        '400':
          $ref: '#/components/responses/Invalid'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '422':
          $ref: '#/components/responses/UnableToProcess'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /offices:
    get:
      summary: Retrieve offices
      description: Query offices in the database
      parameters:
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            description: 'Max number of offices to return.'
            example: 10
            default: 10
        - name: offset
          required: false
          in: query
          schema:
            type: integer
            default: 0
            description: 'Return reps after the offset (for supporting pagination)'
            example: 0
      responses:
        '200':
          $ref: '#/components/responses/ValidOffices'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /office/{id}:
    get:
      summary: Get office by id
      description: Retrieve a office by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            description: 'office id'
      responses:
        '200':
          $ref: '#/components/responses/ValidOffice'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update an existing office
      description: Updates an existing office by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            description: 'office id'
      requestBody:
        content: {}
      responses:
        '200':
          $ref: '#/components/responses/ValidOffice'
        '400':
          $ref: '#/components/responses/Invalid'
        '422':
          $ref: '#/components/responses/UnableToProcess'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /office:
    post:
      summary: Add office
      description: Add a new office to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Office'
      responses:
        '200':
          $ref: '#/components/responses/ValidOffice'
        '400':
          $ref: '#/components/responses/Invalid'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '422':
          $ref: '#/components/responses/UnableToProcess'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /files:
    get:
      summary: Retrieve files
      description: Query files in the database
      parameters:
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            description: 'Max number of files to return.'
            example: 10
            default: 10
        - name: offset
          required: false
          in: query
          schema:
            type: integer
            default: 0
            description: 'Return reps after the offset (for supporting pagination)'
            example: 0
      responses:
        '200':
          $ref: '#/components/responses/ValidFiles'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /file/{id}:
    get:
      summary: Get file by id
      description: Retrieve a file by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            description: 'file id'
      responses:
        '200':
          $ref: '#/components/responses/ValidFile'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update an existing file
      description: Updates an existing file by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            description: 'file id'
      requestBody:
        content: {}
      responses:
        '200':
          $ref: '#/components/responses/ValidFile'
        '400':
          $ref: '#/components/responses/Invalid'
        '422':
          $ref: '#/components/responses/UnableToProcess'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /file:
    post:
      summary: Add file
      description: Add a new file to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          $ref: '#/components/responses/ValidFile'
        '400':
          $ref: '#/components/responses/Invalid'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '422':
          $ref: '#/components/responses/UnableToProcess'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /counties:
    get:
      summary: Retrieve counties
      description: Get full list of states and counties in the database
      responses:
        '200':
          $ref: '#/components/responses/ValidCounties'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'


  /states:
    get:
      summary: Retrieve states
      description: Get full list of states in the database
      responses:
        '200':
          $ref: '#/components/responses/ValidStates'
        '400':
          $ref: '#/components/responses/Invalid'
        '500':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'


components:
  requestBodies: {}
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    Invalid:
      description: 'Request error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AlreadyExists:
      description: 'The item already exists'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnableToProcess:
      description: 'Failed to process the listing data'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Error:
      description: 'Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidCounties:
      description: 'Valid'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/County'
    ValidStates:
      description: 'Valid'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/State'
    ValidItems:
      description: 'Valid'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Item'
    ValidItem:
      description: 'Valid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Item'
    ValidReps:
      description: 'Valid'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Rep'
    ValidRep:
      description: 'Valid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Rep'
    ValidOffices:
      description: 'Valid'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Office'
    ValidOffice:
      description: 'Valid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Office'
    ValidFiles:
      description: 'Valid'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/File'
    ValidFile:
      description: 'Valid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/File'
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: 'The error message'
      required:
        - error
      additionalProperties: false
    County:
      type: object
      properties:
        state_abbreviation:
          type: string
          description: '2 letter state code'
          example: 'OR'
        state:
          type: string
          description: 'State full name'
          example: 'Oregon'
        county:
          type: string
          description: 'Name of the county'
          example: 'Klamath'
      required:
        - state_abbreviation
        - state
        - county
      additionalProperties: false
    State:
      type: object
      properties:
        state_abbreviation:
          type: string
          description: '2 letter state code'
          example: 'OR'
        state:
          type: string
          description: 'State full name'
          example: 'Oregon'
      required:
        - state_abbreviation
        - state
      additionalProperties: false
    Rep:
      type: object
      properties:
        id:
          type: string
          description: 'Unique id in AcreBin DB of the listing rep'
        rep_type:
          type: string
          description: 'The type of listing rep'
          example: 'agent'
          enum:
            - broker
            - agent
            - co-agent
        name:
          type: string
          description: 'Name of the listing rep'
          example: 'Alex Doe'
        email:
          type: string
          description: 'Email of the listing rep'
          example: 'alex.doe@company.com'
        mobile_phone:
          type: string
          description: 'Phone number of the listing rep'
          example: '555-888-9999'
        business_phone:
          type: string
          description: 'Business phone number of the listing rep'
          example: '555-666-7777'
        picture_url:
          type: string
          description: 'Photo url (if available)'
        office_ids:
          description: 'The office id(s) of the listing rep'
          type: array
          items:
            type: string
      required:
        - id
        - rep_type
        - name
        - email
        - office_ids
      additionalProperties: false
    Office:
      type: object
      properties:
        id:
          description: 'The unique id of this office in AcreBin DB'
          type: string
        phone:
          description: 'The phone number of the office'
          type: string
        email:
          description: 'The email address of the office'
          type: string
        website:
          description: 'The website of the office'
          type: string
        logo_url:
          description: 'A URL to the logo of the office'
          type: string
      required:
        - id
      additionalProperties: false
    File:
      type: object
      properties:
        id:
          description: 'The unique id of this file in AcreBin DB'
          type: string
        url:
          description: 'The url of the file'
          type: string
        type:
          description: 'The type of file'
          type: string
        title:
          type: string
        description:
          type: string
      required:
        - id
        - url
        - type
      additionalProperties: false
    Item:
      type: object
      properties:
        id:
          type: string
          description: 'The unique id of the listing in AcreBin DB'
        primary_image_url:
          type: string
          description: 'Acrebin hosted primary image of the listing'
        title:
          type: string
          description: 'The listing title'
        last_modified:
          type: string
          format: date-time
          description: 'The date and time this listing was last updated'
        acreage:
          type: number
          description: 'Total acres of the listing'
          example: 0.2
        status:
          type: string
        price:
          type: number
          description: 'Price of the listing in dollars'
          example: 20000000
        dwelling_sq_ft:
          type: number
          description: 'Square footage of the household (if applicable)'
          example: 1000
        bedrooms:
          type: integer
          description: 'Number of bedrooms'
          example: 2
        bathrooms:
          type: number
          description: 'Number of bathrooms'
          example: 1.5
        taxes:
          type: number
          description: 'Estimated taxes'
          example: 10000
        hoa:
          type: number
          description: 'HOA fees'
          example: 200
        description:
          type: string
          description: 'Description of the item'
          example: 'An example description for a lot somewhere'
        reduced:
          type: boolean
          description: 'Whether the price was reduced'
        commission:
          description: 'Commission amount of the listing'
          type: number
        sale_type:
          type: string
          description: 'Sale type of the listing'
        external_url:
          type: string
          description: 'External URL of the listing'
        embedded_map_url:
          type: string
          description: 'Embedded map of the listing'
        embedded_video_url:
          type: string
          description: 'Embedded video URL'
        featured:
          description: 'Whether or not the listing is featured'
          type: boolean
        address:
          type: string
          description: 'Address line 1 or full address of the listing'
        address_2:
          description: 'Address line 2 of the listing'
          type: string
        city:
          description: 'City of the listing'
          type: string
        state_abbreviation:
          type: string
          description: 'State abbreviation of the listing'
        state:
          type: string
          description: 'State name of the listing'
        zip:
          type: string
          description: 'Zip code of the listing'
        county:
          description: 'County of the listing'
          type: string
        longitude:
          description: 'Longitude of the listing'
          type: number
        latitude:
          description: 'Latitude of the listing'
          type: number
        item_types:
          type: array
          description: 'Array of listing types'
          items:
            type: string
        rep_ids:
          description: 'Array of listing rep ids'
          type: array
          items:
            type: string
        file_ids:
          type: array
          items:
            type: string
        file_urls:
          type: array
          items:
            type: string
      required:
        - id
        - title
        - acreage
        - status
        - price
        - rep_ids
        - file_ids
        - file_urls
        - item_types
      additionalProperties: false

security:
  - basicAuth: []  # <-- use the same name here
